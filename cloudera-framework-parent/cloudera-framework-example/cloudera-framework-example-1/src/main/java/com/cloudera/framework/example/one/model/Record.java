/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.framework.example.one.model;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\"," +
    "\"name\":\"Record\",\"namespace\":\"com.cloudera.framework.example.one.model\",\"fields\":[{\"name\":\"ingest_id\"," +
    "\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"}," +
    "{\"name\":\"ingest_batch\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null," +
    "\"order\":\"ignore\"},{\"name\":\"ingest_timestamp\",\"type\":[\"null\",\"long\"],\"default\":null,\"order\":\"ignore\"}," +
    "{\"name\":\"my_timestamp\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"my_integer\",\"type\":[\"null\",\"int\"]," +
    "\"default\":null},{\"name\":\"my_double\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"my_boolean\"," +
    "\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"my_string\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java" +
    ".string\":\"String\"}],\"default\":null}]}");
  @Deprecated
  public java.lang.String ingest_id;
  @Deprecated
  public java.lang.String ingest_batch;
  @Deprecated
  public java.lang.Long ingest_timestamp;
  @Deprecated
  public java.lang.Long my_timestamp;
  @Deprecated
  public java.lang.Integer my_integer;
  @Deprecated
  public java.lang.Double my_double;
  @Deprecated
  public java.lang.Boolean my_boolean;
  @Deprecated
  public java.lang.String my_string;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Record() {
  }

  /**
   * All-args constructor.
   */
  public Record(java.lang.String ingest_id, java.lang.String ingest_batch, java.lang.Long ingest_timestamp, java.lang.Long my_timestamp,
                java.lang.Integer my_integer, java.lang.Double my_double, java.lang.Boolean my_boolean, java.lang.String my_string) {
    this.ingest_id = ingest_id;
    this.ingest_batch = ingest_batch;
    this.ingest_timestamp = ingest_timestamp;
    this.my_timestamp = my_timestamp;
    this.my_integer = my_integer;
    this.my_double = my_double;
    this.my_boolean = my_boolean;
    this.my_string = my_string;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Creates a new Record RecordBuilder
   */
  public static com.cloudera.framework.example.one.model.Record.Builder newBuilder() {
    return new com.cloudera.framework.example.one.model.Record.Builder();
  }

  /**
   * Creates a new Record RecordBuilder by copying an existing Builder
   */
  public static com.cloudera.framework.example.one.model.Record.Builder newBuilder(com.cloudera.framework.example.one.model.Record
                                                                                     .Builder other) {
    return new com.cloudera.framework.example.one.model.Record.Builder(other);
  }

  /**
   * Creates a new Record RecordBuilder by copying an existing Record instance
   */
  public static com.cloudera.framework.example.one.model.Record.Builder newBuilder(com.cloudera.framework.example.one.model.Record other) {
    return new com.cloudera.framework.example.one.model.Record.Builder(other);
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return ingest_id;
      case 1:
        return ingest_batch;
      case 2:
        return ingest_timestamp;
      case 3:
        return my_timestamp;
      case 4:
        return my_integer;
      case 5:
        return my_double;
      case 6:
        return my_boolean;
      case 7:
        return my_string;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        ingest_id = (java.lang.String) value$;
        break;
      case 1:
        ingest_batch = (java.lang.String) value$;
        break;
      case 2:
        ingest_timestamp = (java.lang.Long) value$;
        break;
      case 3:
        my_timestamp = (java.lang.Long) value$;
        break;
      case 4:
        my_integer = (java.lang.Integer) value$;
        break;
      case 5:
        my_double = (java.lang.Double) value$;
        break;
      case 6:
        my_boolean = (java.lang.Boolean) value$;
        break;
      case 7:
        my_string = (java.lang.String) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ingest_id' field.
   */
  public java.lang.String getIngestId() {
    return ingest_id;
  }

  /**
   * Sets the value of the 'ingest_id' field.
   *
   * @param value the value to set.
   */
  public void setIngestId(java.lang.String value) {
    this.ingest_id = value;
  }

  /**
   * Gets the value of the 'ingest_batch' field.
   */
  public java.lang.String getIngestBatch() {
    return ingest_batch;
  }

  /**
   * Sets the value of the 'ingest_batch' field.
   *
   * @param value the value to set.
   */
  public void setIngestBatch(java.lang.String value) {
    this.ingest_batch = value;
  }

  /**
   * Gets the value of the 'ingest_timestamp' field.
   */
  public java.lang.Long getIngestTimestamp() {
    return ingest_timestamp;
  }

  /**
   * Sets the value of the 'ingest_timestamp' field.
   *
   * @param value the value to set.
   */
  public void setIngestTimestamp(java.lang.Long value) {
    this.ingest_timestamp = value;
  }

  /**
   * Gets the value of the 'my_timestamp' field.
   */
  public java.lang.Long getMyTimestamp() {
    return my_timestamp;
  }

  /**
   * Sets the value of the 'my_timestamp' field.
   *
   * @param value the value to set.
   */
  public void setMyTimestamp(java.lang.Long value) {
    this.my_timestamp = value;
  }

  /**
   * Gets the value of the 'my_integer' field.
   */
  public java.lang.Integer getMyInteger() {
    return my_integer;
  }

  /**
   * Sets the value of the 'my_integer' field.
   *
   * @param value the value to set.
   */
  public void setMyInteger(java.lang.Integer value) {
    this.my_integer = value;
  }

  /**
   * Gets the value of the 'my_double' field.
   */
  public java.lang.Double getMyDouble() {
    return my_double;
  }

  /**
   * Sets the value of the 'my_double' field.
   *
   * @param value the value to set.
   */
  public void setMyDouble(java.lang.Double value) {
    this.my_double = value;
  }

  /**
   * Gets the value of the 'my_boolean' field.
   */
  public java.lang.Boolean getMyBoolean() {
    return my_boolean;
  }

  /**
   * Sets the value of the 'my_boolean' field.
   *
   * @param value the value to set.
   */
  public void setMyBoolean(java.lang.Boolean value) {
    this.my_boolean = value;
  }

  /**
   * Gets the value of the 'my_string' field.
   */
  public java.lang.String getMyString() {
    return my_string;
  }

  /**
   * Sets the value of the 'my_string' field.
   *
   * @param value the value to set.
   */
  public void setMyString(java.lang.String value) {
    this.my_string = value;
  }

  /**
   * RecordBuilder for Record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Record>
    implements org.apache.avro.data.RecordBuilder<Record> {

    private java.lang.String ingest_id;
    private java.lang.String ingest_batch;
    private java.lang.Long ingest_timestamp;
    private java.lang.Long my_timestamp;
    private java.lang.Integer my_integer;
    private java.lang.Double my_double;
    private java.lang.Boolean my_boolean;
    private java.lang.String my_string;

    /**
     * Creates a new Builder
     */
    private Builder() {
      super(com.cloudera.framework.example.one.model.Record.SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder
     */
    private Builder(com.cloudera.framework.example.one.model.Record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ingest_id)) {
        this.ingest_id = data().deepCopy(fields()[0].schema(), other.ingest_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ingest_batch)) {
        this.ingest_batch = data().deepCopy(fields()[1].schema(), other.ingest_batch);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ingest_timestamp)) {
        this.ingest_timestamp = data().deepCopy(fields()[2].schema(), other.ingest_timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.my_timestamp)) {
        this.my_timestamp = data().deepCopy(fields()[3].schema(), other.my_timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.my_integer)) {
        this.my_integer = data().deepCopy(fields()[4].schema(), other.my_integer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.my_double)) {
        this.my_double = data().deepCopy(fields()[5].schema(), other.my_double);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.my_boolean)) {
        this.my_boolean = data().deepCopy(fields()[6].schema(), other.my_boolean);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.my_string)) {
        this.my_string = data().deepCopy(fields()[7].schema(), other.my_string);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Record instance
     */
    private Builder(com.cloudera.framework.example.one.model.Record other) {
      super(com.cloudera.framework.example.one.model.Record.SCHEMA$);
      if (isValidValue(fields()[0], other.ingest_id)) {
        this.ingest_id = data().deepCopy(fields()[0].schema(), other.ingest_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ingest_batch)) {
        this.ingest_batch = data().deepCopy(fields()[1].schema(), other.ingest_batch);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ingest_timestamp)) {
        this.ingest_timestamp = data().deepCopy(fields()[2].schema(), other.ingest_timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.my_timestamp)) {
        this.my_timestamp = data().deepCopy(fields()[3].schema(), other.my_timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.my_integer)) {
        this.my_integer = data().deepCopy(fields()[4].schema(), other.my_integer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.my_double)) {
        this.my_double = data().deepCopy(fields()[5].schema(), other.my_double);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.my_boolean)) {
        this.my_boolean = data().deepCopy(fields()[6].schema(), other.my_boolean);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.my_string)) {
        this.my_string = data().deepCopy(fields()[7].schema(), other.my_string);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Gets the value of the 'ingest_id' field
     */
    public java.lang.String getIngestId() {
      return ingest_id;
    }

    /**
     * Sets the value of the 'ingest_id' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setIngestId(java.lang.String value) {
      validate(fields()[0], value);
      this.ingest_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'ingest_id' field has been set
     */
    public boolean hasIngestId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'ingest_id' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearIngestId() {
      ingest_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'ingest_batch' field
     */
    public java.lang.String getIngestBatch() {
      return ingest_batch;
    }

    /**
     * Sets the value of the 'ingest_batch' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setIngestBatch(java.lang.String value) {
      validate(fields()[1], value);
      this.ingest_batch = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'ingest_batch' field has been set
     */
    public boolean hasIngestBatch() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'ingest_batch' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearIngestBatch() {
      ingest_batch = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'ingest_timestamp' field
     */
    public java.lang.Long getIngestTimestamp() {
      return ingest_timestamp;
    }

    /**
     * Sets the value of the 'ingest_timestamp' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setIngestTimestamp(java.lang.Long value) {
      validate(fields()[2], value);
      this.ingest_timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'ingest_timestamp' field has been set
     */
    public boolean hasIngestTimestamp() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'ingest_timestamp' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearIngestTimestamp() {
      ingest_timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'my_timestamp' field
     */
    public java.lang.Long getMyTimestamp() {
      return my_timestamp;
    }

    /**
     * Sets the value of the 'my_timestamp' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setMyTimestamp(java.lang.Long value) {
      validate(fields()[3], value);
      this.my_timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'my_timestamp' field has been set
     */
    public boolean hasMyTimestamp() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'my_timestamp' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearMyTimestamp() {
      my_timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'my_integer' field
     */
    public java.lang.Integer getMyInteger() {
      return my_integer;
    }

    /**
     * Sets the value of the 'my_integer' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setMyInteger(java.lang.Integer value) {
      validate(fields()[4], value);
      this.my_integer = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'my_integer' field has been set
     */
    public boolean hasMyInteger() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'my_integer' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearMyInteger() {
      my_integer = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'my_double' field
     */
    public java.lang.Double getMyDouble() {
      return my_double;
    }

    /**
     * Sets the value of the 'my_double' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setMyDouble(java.lang.Double value) {
      validate(fields()[5], value);
      this.my_double = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'my_double' field has been set
     */
    public boolean hasMyDouble() {
      return fieldSetFlags()[5];
    }

    /**
     * Clears the value of the 'my_double' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearMyDouble() {
      my_double = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'my_boolean' field
     */
    public java.lang.Boolean getMyBoolean() {
      return my_boolean;
    }

    /**
     * Sets the value of the 'my_boolean' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setMyBoolean(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.my_boolean = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'my_boolean' field has been set
     */
    public boolean hasMyBoolean() {
      return fieldSetFlags()[6];
    }

    /**
     * Clears the value of the 'my_boolean' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearMyBoolean() {
      my_boolean = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'my_string' field
     */
    public java.lang.String getMyString() {
      return my_string;
    }

    /**
     * Sets the value of the 'my_string' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder setMyString(java.lang.String value) {
      validate(fields()[7], value);
      this.my_string = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'my_string' field has been set
     */
    public boolean hasMyString() {
      return fieldSetFlags()[7];
    }

    /**
     * Clears the value of the 'my_string' field
     */
    public com.cloudera.framework.example.one.model.Record.Builder clearMyString() {
      my_string = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Record build() {
      try {
        Record record = new Record();
        record.ingest_id = fieldSetFlags()[0] ? this.ingest_id : (java.lang.String) defaultValue(fields()[0]);
        record.ingest_batch = fieldSetFlags()[1] ? this.ingest_batch : (java.lang.String) defaultValue(fields()[1]);
        record.ingest_timestamp = fieldSetFlags()[2] ? this.ingest_timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.my_timestamp = fieldSetFlags()[3] ? this.my_timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.my_integer = fieldSetFlags()[4] ? this.my_integer : (java.lang.Integer) defaultValue(fields()[4]);
        record.my_double = fieldSetFlags()[5] ? this.my_double : (java.lang.Double) defaultValue(fields()[5]);
        record.my_boolean = fieldSetFlags()[6] ? this.my_boolean : (java.lang.Boolean) defaultValue(fields()[6]);
        record.my_string = fieldSetFlags()[7] ? this.my_string : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
