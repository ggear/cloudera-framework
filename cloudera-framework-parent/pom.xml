<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.cloudera.framework</groupId>
    <artifactId>cloudera-framework-parent</artifactId>
    <packaging>pom</packaging>
    <version>1.5.6-cdh5.12.0-SNAPSHOT</version>

    <parent>
        <groupId>com.cloudera</groupId>
        <artifactId>cloudera-framework</artifactId>
        <version>1.5.6-cdh5.12.0-SNAPSHOT</version>
    </parent>

    <properties>

        <conda.build.skip>true</conda.build.skip>

        <templater.build.skip>true</templater.build.skip>

        <parcel.build.skip>true</parcel.build.skip>
        <parcel.build.target>el7</parcel.build.target>
        <parcel.build.repo>scp://graham:/Users/graham/.ssh/id_rsa.pem@52.63.86.162:22/var/www/html/tmph3l7m2vv103/apps/${project.artifactId}/parcels</parcel.build.repo>

        <cloudera-framework.version>${project.version}</cloudera-framework.version>

    </properties>

    <modules>
        <module>cloudera-framework-example-1</module>
        <module>cloudera-framework-example-2</module>
        <module>cloudera-framework-example-3</module>
        <module>cloudera-framework-example-4</module>
        <module>cloudera-framework-example-5</module>
    </modules>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.groovy.maven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                import org.apache.commons.lang.StringUtils

                                project.properties["parcel.name"] = StringUtils.upperCase(project.artifactId).replaceAll('-', '_') + "-" + project.version
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>conda-resources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/test-python</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources/python</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <skip>${conda.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>templater-script</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>src/main/script/scala</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/template/scala</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <filters>
                                <filter>${project.build.directory}/templater-assembly/script.properties</filter>
                            </filters>
                            <skip>${templater.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>templater-scala</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>src/main/scala</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/template/scala</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                            <filters>
                                <filter>${project.build.directory}/templater-assembly/library.properties</filter>
                            </filters>
                            <skip>${templater.build.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>conda-clean</id>
                        <phase>clean</phase>
                        <configuration>
                            <target>
                                <exec executable="conda" failonerror="true">
                                    <arg value="env" />
                                    <arg value="remove" />
                                    <arg value="-y" />
                                    <arg value="-p=${project.build.directory}/test-python/python" />
                                </exec>
                            </target>
                            <skip>${conda.build.skip}</skip>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>conda-create</id>
                        <phase>process-sources</phase>
                        <configuration>
                            <target>
                                <exec executable="conda" failonerror="true">
                                    <arg value="env" />
                                    <arg value="create" />
                                    <arg value="-f=${project.build.directory}/test-python/conda.yml" />
                                    <arg value="-p=${project.build.directory}/test-python/python" />
                                </exec>
                            </target>
                            <skip>${conda.build.skip}</skip>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.cloudera.parcel</groupId>
                <artifactId>cloudera-parcel-plugin</artifactId>
                <executions>
                    <execution>
                        <id>prepare</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>prepare</goal>
                        </goals>
                        <configuration>
                            <parcels>
                                <parcel>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>${parcel.build.target}</classifier>
                                </parcel>
                            </parcels>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>package</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <parcels>
                                <parcel>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>${parcel.build.target}</classifier>
                                    <distributionRepositoryUrl>${parcel.build.repo}</distributionRepositoryUrl>
                                </parcel>
                            </parcels>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                        <configuration>
                            <parcels>
                                <parcel>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>${parcel.build.target}</classifier>
                                    <distributionRepositoryUrl>${parcel.build.repo}</distributionRepositoryUrl>
                                </parcel>
                            </parcels>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>assembly-tar</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/assembly/assembly.xml</descriptor>
                            </descriptors>
                            <tarLongFileMode>gnu</tarLongFileMode>
                            <skipAssembly>${parcel.build.skip}</skipAssembly>
                        </configuration>
                    </execution>
                    <execution>
                        <id>conda-zip</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/resources/python/conda.xml</descriptor>
                            </descriptors>
                            <skipAssembly>${conda.build.skip}</skipAssembly>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-templater</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.jag.maven-templater</groupId>
                                    <artifactId>maven-templater-assembly</artifactId>
                                    <version>${templater.version}</version>
                                    <outputDirectory>${project.build.directory}/templater-assembly</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                            <includes>**/*.properties</includes>
                            <skip>${templater.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parcel-dependency</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${project.build.directory}/parcel/${parcel.name}/lib/jar</outputDirectory>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parcel-dependencies</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <excludeTypes>pom</excludeTypes>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <outputDirectory>${project.build.directory}/parcel/${parcel.name}/lib/jar</outputDirectory>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parcel-dependency-flume</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${project.build.directory}/parcel/${parcel.name}/lib/flume/${project.artifactId}/lib</outputDirectory>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parcel-dependencies-flume</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <excludeTypes>pom</excludeTypes>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <outputDirectory>${project.build.directory}/parcel/${parcel.name}/lib/flume/${project.artifactId}/libext</outputDirectory>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>parcel-assembly</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.cloudera.framework</groupId>
                                    <artifactId>cloudera-framework-assembly</artifactId>
                                    <version>${cloudera-framework.version}</version>
                                    <type>tar.gz</type>
                                    <classifier>assembly</classifier>
                                    <outputDirectory>${project.build.directory}/parcel/${parcel.name}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack-assembly</id>
                        <phase>install</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <classifier>assembly</classifier>
                                    <type>tar.gz</type>
                                    <outputDirectory>${project.build.directory}/assembly</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                            <skip>${parcel.build.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
